# Finish hosts prep on dedicated instances
- hosts: bigbluebutton:elasticsearch:freeipa
  tasks:
  - include_role:
      name: commons
    when:
    - not (is_on_shared_hardware | default(False))

# Configures Firewall
- hosts: lb:postgres:redis:sshfs:reverse:coturn
  tasks:
  - include_role:
      name: firehol
    when:
    - setup_firewall | default(True)
    - not (is_on_shared_hardware | default(False))

# Initilizes BBB PKI
# Generates Certificates to BBB, Greenlight, Scalelite,
# AlertManager & Prometheus
- hosts: bbb:bbbcsp:scalelite:greenlight:peertube:prometheus:grafana:alertmanager:coturn:kibana
  roles:
  - { name: pki, when: bbb_uses_selfsigned | default(True) }
- hosts: bbb
  serial: 1
  tasks:
  - include_role:
      name: pki
      tasks_from: generate-cert.yaml
    vars:
      cert_fqdn: "{{ bigbluebutton_fqdn | default(ansible_fqdn) }}"
    when:
    - ansible_hostname not in groups['greenlight']
    - ansible_nodename not in groups['greenlight']
    - ansible_fqdn not in groups['greenlight']
    - bbb_uses_selfsigned | default(True)
- hosts: greenlight
  serial: 1
  tasks:
  - name: Fail on missing Greenlight FQDN
    fail:
      msg: |
        Greenlight FQDN has to be set, deploying multiple servers
    when:
    - groups['greenlight'] | length > 1
    - not (greenlight_fqdn | default(False))
  - include_role:
      name: pki
      tasks_from: generate-cert.yaml
    vars:
      cert_fqdn: "{{ greenlight_fqdn | default(ansible_fqdn) }}"
    when:
    - bbb_uses_selfsigned | default(True)
- hosts: peertube
  serial: 1
  tasks:
  - name: Fail on missing PeerTube FQDN
    fail:
      msg: |
       PeerTube FQDN has to be set, deploying multiple servers
    when:
    - groups['peertube'] | length > 1
    - not (peertube_fqdn | default(False))
  - include_role:
      name: pki
      tasks_from: generate-cert.yaml
    vars:
      cert_fqdn: "{{ peertube_fqdn | default(ansible_fqdn) }}"
    when:
    - bbb_uses_selfsigned | default(True)
- hosts: scalelite
  serial: 1
  tasks:
  - name: Fail on missing Scalelite FQDN
    fail:
      msg: |
        Scalelite FQDN has to be set, deploying multiple servers
    when:
    - groups['scalelite'] | length > 1
    - not (scalelite_fqdn | default(False))
  - include_role:
      name: pki
      tasks_from: generate-cert.yaml
    vars:
      cert_fqdn: "{{ scalelite_fqdn | default(ansible_fqdn) }}"
    when:
    - bbb_uses_selfsigned | default(True)
- hosts: bbbcsp
  serial: 1
  tasks:
  - name: Fail on missing BBB-CSP FQDN
    fail:
      msg: |
       BigBlueButton Conferences Streaming Platform FQDN has to be set, deploying multiple servers
    when:
    - groups['bbbcsp'] | length > 1
    - not (bbbcsp_fqdn | default(False))
  - include_role:
      name: pki
      tasks_from: generate-cert.yaml
    vars:
      cert_fqdn: "{{ bbbcsp_fqdn | default(ansible_fqdn) }}"
    when:
    - bbb_uses_selfsigned | default(True)
- hosts: coturn
  serial: 1
  tasks:
  - include_role:
      name: pki
      tasks_from: generate-cert.yaml
    vars:
      cert_fqdn: "{{ coturn_fqdn | default(ansible_fqdn) }}"
    when:
    - bbb_uses_selfsigned | default(True)
- hosts: kibana
  serial: 1
  tasks:
  - name: Fail on missing Kibana FQDN
    fail:
      msg: |
        Kibana FQDN has to be set, deploying multiple servers
    when:
    - groups['kibana'] | length > 1
    - not (kibana_fqdn | default(False))
  - include_role:
      name: pki
      tasks_from: generate-cert.yaml
    vars:
      cert_fqdn: "{{ kibana_fqdn | default(ansible_fqdn) }}"
    when:
    - bbb_uses_selfsigned | default(True)
- hosts: alertmanager
  serial: 1
  tasks:
  - name: Fail on missing AlertManager FQDN
    fail:
      msg: |
        AlertManager FQDN has to be set, deploying multiple servers
    when:
    - groups['alertmanager'] | length > 1
    - not (alertmanager_fqdn | default(False))
  - include_role:
      name: pki
      tasks_from: generate-cert.yaml
    vars:
      cert_fqdn: "{{ alertmanager_fqdn | default(ansible_fqdn) }}"
    when:
    - bbb_uses_selfsigned | default(True)
    - ansible_fqdn not in groups['prometheus']
    - ansible_hostname not in groups['prometheus']
    - ansible_nodename not in groups['prometheus']
    - ansible_fqdn not in groups['grafana']
    - ansible_hostname not in groups['grafana']
    - ansible_nodename not in groups['grafana']
- hosts: prometheus
  serial: 1
  tasks:
  - name: Fail on missing Prometheus FQDN
    fail:
      msg: |
        Prometheus FQDN has to be set, deploying multiple servers
    when:
    - groups['prometheus'] | length > 1
    - not (prometheus_fqdn | default(False))
  - include_role:
      name: pki
      tasks_from: generate-cert.yaml
    vars:
      cert_fqdn: "{{ prometheus_fqdn | default(ansible_fqdn) }}"
    when:
    - bbb_uses_selfsigned | default(True)
    - ansible_fqdn not in groups['grafana']
    - ansible_hostname not in groups['grafana']
    - ansible_nodename not in groups['grafana']
- hosts: grafana
  serial: 1
  tasks:
  - name: Fail on missing Grafana FQDN
    fail:
      msg: |
        Grafana FQDN has to be set, deploying multiple servers
    when:
    - groups['grafana'] | length > 1
    - not (grafana_fqdn | default(False))
  - include_role:
      name: pki
      tasks_from: generate-cert.yaml
    vars:
      cert_fqdn: "{{ grafana_fqdn | default(ansible_fqdn) }}"
    when:
    - bbb_uses_selfsigned | default(True)

# Setup Pacemaker / Corosync on elligible groups
- hosts: pacemaker
  tasks:
  - include_role:
      name: pacemaker
    loop:
    - bbbcsp
    - peertube
    - postgres_coturn
    - postgres_grafana
    - postgres_greenlight
    - postgres_openstreamingplatform
    - postgres_peertube
    - postgres_scalelite
    - redis_peertube
    - redis_scalelite
    - reverse
    - scalelite
    loop_control:
      loop_var: apply_to
    when:
    - groups[apply_to] | length > 1
    - >
        ansible_nodename in groups[apply_to]
        or ansible_hostname in groups[apply_to]
        or ansible_fqdn in groups[apply_to]
    - (corosync_members | default([])) | length > 1
    - corosync_multicast_address | default(False)

# Setup DRBD on elligible groups
- hosts: drbd
  tasks:
  - include_role:
      name: drbd
    loop:
    - peertube
    - postgres_coturn
    - postgres_grafana
    - postgres_greenlight
    - postgres_openstreamingplatform
    - postgres_peertube
    - postgres_scalelite
    - redis_peertube
    - redis_scalelite
    - scalelite
    loop_control:
      loop_var: apply_to
    when:
    - groups[apply_to] | length > 1
    - >
        ansible_nodename in groups[apply_to]
        or ansible_hostname in groups[apply_to]
        or ansible_fqdn in groups[apply_to]
    - (corosync_members | default([])) | length > 1
    - drbd_resource_name | default(False)

# Prepare Shared FS
# a demo deployment would come without any network filesystem
# otherwise: only one of these would be required, distributing Scalelite
- hosts: nfs
  roles:
  - nfs
- hosts: scalelite
  tasks:
  - include_role:
      name: cephfs
    when:
    - groups['cephfs'] | length > 0
- hosts: sshfs
  roles:
  - sshfs

# Installs Redis
# only required when deploying PeerTube or Scalelite
- hosts: redis_peertube:redis_scalelite
  roles:
  - redis

# Installs Postgres
# provisions Greenlight, Moodle PeerTube & Scalelite databases & users
- hosts: postgres
  roles:
  - postgres

# Installs HAProxy for backend services
# sends PeerTube & Scalelite clients to redis Master, Prometheus to
# AlertManager, Grafana to Prometheus
- hosts: lb_back
  roles:
  - haproxy

# Installs Coturn
- hosts: coturn
  roles:
  - coturn

# Installs BigBlueButton
- hosts: bbb
  tasks:
  - include_role:
      name: bigbluebutton
    when:
    - not (skip_bbb | default(False))

# Installs Scalelite
- hosts: scalelite
  roles:
  - scalelite

# Registers BigBlueButton backends to Scalelite
- hosts: scalelite
  tasks:
  - include_role:
      name: scalelite
      tasks_from: init-backends.yaml
    when:
    - groups['bbb'] | length > 0
    - not (skip_bbb | default(False))
# Trusts Scalelite SSH Hostkey in BBB
- hosts: bbb
  tasks:
  - include_role:
      name: bigbluebutton
      tasks_from: ssh-keyscan.yaml
    when:
    - groups['cephfs'] | length == 0
    - groups['nfs'] | length == 0
    - not (skip_bbb | default(False))

# Installs HAProxy for frontend services
# -- don't re-apply, if host also member of lb_back group
- hosts: lb_front
  tasks:
  - include_role:
      name: haproxy
    when:
    - not (ansible_fqdn in groups['lb_back'])
    - not (ansible_hostname in groups['lb_back'])
    - not (ansible_nodename in groups['lb_back'])

# Installs Nginx Reverse Proxy
- hosts: reverse
  roles:
  - reverse
  serial: 1

# Installs Greenlight
- hosts: greenlight
  roles:
  - greenlight

# Installs OpenStreamingPlatform
- hosts: openstreamingplatform
  roles:
  - openstreamingplatform

# Installs PeerTube
- hosts: peertube
  roles:
  - peertube

# Installs BigBlueButton Conferences Streaming Platform
- hosts: bbbcsp
  roles:
  - bbbcsp

# Installs ElasticSearch
- hosts: elasticsearch
  roles:
  - elasticsearch

# Configures Fail2ban
- hosts: bastion:bbb:coturn:lb_front:reverse
  tasks:
  - include_role:
      name: fail2ban
    when:
    - setup_fail2ban | default(True)
    - not (is_on_shared_hardware | default(False))

# Configures Logs Forwarding
- hosts: bigbluebutton:elasticsearch:freeipa
  tasks:
  - include_role:
      name: fluentd
    when:
    - groups['elasticsearch'] | length > 0

# Installs Kibana
- hosts: kibana
  roles:
  - kibana

# Installs AlertManager
- hosts: alertmanager
  roles:
  - alertmanager

# Installs Prometheus
- hosts: prometheus
  roles:
  - prometheus

# Installs Grafana
- hosts: grafana
  roles:
  - grafana
